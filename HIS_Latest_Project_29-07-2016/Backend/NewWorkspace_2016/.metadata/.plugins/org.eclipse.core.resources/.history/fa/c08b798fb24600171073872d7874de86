package core.resources.standards;

import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.log4j.Logger;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import lib.driver.hr.driver_class.VillageDBDriver;
import lib.driver.standards.driver_class.ComplaintsDBDriver;
import core.ErrorConstants;
import core.classes.hr.Village;
import core.classes.standards.Complaint;
import core.resources.opd.AllergyResource;
import flexjson.JSONSerializer;

@Path("Complaint")
public class ComplaintResource {

	final static Logger log = Logger.getLogger(ComplaintResource.class);
	ComplaintsDBDriver complaintsDBDriver = new ComplaintsDBDriver();
	
	@GET
	@Path("/getComplainsOnSearch/{complaint}")
	@Produces(MediaType.APPLICATION_JSON)
	public String getVillageOnSearch(@PathParam("complaint")  String complaintName) throws JSONException {
		
		
		try {
			List<Complaint> complaintList=complaintsDBDriver.getVillageOnSearch(complaintName);
			
			JSONSerializer serializer = new JSONSerializer();
			
			return serializer.include("name").exclude("*").serialize(complaintList);
			
		}
		catch(RuntimeException e)
		{
			log.error("Runtime Exception in searching for Complaint name, message:" + e.getMessage());
			JSONObject jsonErrorObject = new JSONObject();
			
			jsonErrorObject.put("errorcode", ErrorConstants.NO_CONNECTION.getCode());
			jsonErrorObject.put("message", ErrorConstants.NO_CONNECTION.getMessage());
			
			
			return jsonErrorObject.toString(); 
		}
		catch(Exception e)
		{
			log.error("Error while searching for Complaint name, message:" + e.getMessage());
			
			JSONObject jsonErrorObject = new JSONObject();
			
			jsonErrorObject.put("errorcode", ErrorConstants.NO_DATA.getCode());
			jsonErrorObject.put("message", ErrorConstants.NO_DATA.getMessage());
			
			return jsonErrorObject.toString(); 
			
		}
	}
}
